//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 2023/6/18 16:27:47
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace EFTestModel
{

    public partial class EFTestModel : DbContext
    {

        public EFTestModel() :
            base()
        {
            OnCreated();
        }

        public EFTestModel(DbContextOptions<EFTestModel> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(@"Data Source=.;Initial Catalog=EFTest;Integrated Security=True;Persist Security Info=True");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<TestChild> TestChildren
        {
            get;
            set;
        }

        public virtual DbSet<TestTable> TestTables
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            this.TestChildMapping(modelBuilder);
            this.CustomizeTestChildMapping(modelBuilder);

            this.TestTableMapping(modelBuilder);
            this.CustomizeTestTableMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region TestChild Mapping

        private void TestChildMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TestChild>().ToTable(@"TestChildren", @"dbo");
            modelBuilder.Entity<TestChild>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<TestChild>().Property(x => x.ParentId).HasColumnName(@"ParentId").HasColumnType(@"int").IsRequired().ValueGeneratedNever().HasPrecision(10, 0);
            modelBuilder.Entity<TestChild>().Property(x => x.Name).HasColumnName(@"Name").HasColumnType(@"varchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<TestChild>().HasKey(@"Id");
        }

        partial void CustomizeTestChildMapping(ModelBuilder modelBuilder);

        #endregion

        #region TestTable Mapping

        private void TestTableMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TestTable>().ToTable(@"TestTable", @"dbo");
            modelBuilder.Entity<TestTable>().Property(x => x.Id).HasColumnName(@"Id").HasColumnType(@"int").IsRequired().ValueGeneratedOnAdd().HasPrecision(10, 0);
            modelBuilder.Entity<TestTable>().Property(x => x.Name).HasColumnName(@"Name").HasColumnType(@"nvarchar(50)").ValueGeneratedNever().HasMaxLength(50);
            modelBuilder.Entity<TestTable>().HasKey(@"Id");
        }

        partial void CustomizeTestTableMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TestChild>().HasOne(x => x.TestTable).WithMany(op => op.TestChildren).HasForeignKey(@"ParentId").IsRequired(true);

            modelBuilder.Entity<TestTable>().HasMany(x => x.TestChildren).WithOne(op => op.TestTable).HasForeignKey(@"ParentId").IsRequired(true);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
